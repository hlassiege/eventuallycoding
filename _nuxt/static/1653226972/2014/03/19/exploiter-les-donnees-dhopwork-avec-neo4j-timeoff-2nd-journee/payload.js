__NUXT_JSONP__("/2014/03/19/exploiter-les-donnees-dhopwork-avec-neo4j-timeoff-2nd-journee", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E){return {data:[{article:{slug:"exploiter-les-donnees-dhopwork-avec-neo4j-timeoff-2nd-journee",description:"[![neo4j](\u002Fimages\u002F426f8-neo4j.jpg)](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2014\u002F03\u002F426f8-neo4j.jpg)[Second jour](http:\u002F\u002Fwww.eventuallycoding.c...",id:"1058",title:"Exploiter les données d'HopWork avec Neo4j (timeoff 2nd journée)",date:"2014-03-19",categories:["waza"],tags:[t,j],img:"426f8-neo4j.jpg",cover:u,toc:[{id:v,depth:k,text:w},{id:x,depth:k,text:y},{id:z,depth:k,text:A}],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2014\u002F03\u002F426f8-neo4j.jpg",rel:[f,g,h],target:i},children:[{type:b,tag:B,props:{alt:t,src:"\u002Fimages\u002F426f8-neo4j.jpg"},children:[]}]},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.eventuallycoding.com\u002Findex.php\u002Fansible-timeoff-lt-1ere-journee\u002F",rel:[f,g,h],target:i,title:C},children:[{type:a,value:"Second jour"}]},{type:a,value:" de "},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.eventuallycoding.com\u002Findex.php\u002Fon-devrait-toujours-travailler-comme-ca-bis\u002F",rel:[f,g,h],target:i,title:D},children:[{type:a,value:j}]},{type:a,value:" Lateral-Thoughts, je tente toujours de me tenir à un billet par jour. Et aujourd’hui ce post concernera "},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.neo4j.org\u002F",rel:[f,g,h],target:i},children:[{type:a,value:"Neo4J"}]},{type:a,value:"."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Neo4j fait partie des bases de données orientée graphe. Chez LT nous avons la chance d’avoir "},{type:b,tag:e,props:{href:"https:\u002F\u002Ftwitter.com\u002Ffbiville",rel:[f,g,h],target:i},children:[{type:a,value:"Florent Biville"}]},{type:a,value:" qui maîtrise bien le sujet et j’ai un peu profité de lui, en tout bien tout honneur, pour me faire un peu guider dessus."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Une base de données graphe par définition c’est une base qui traite de relation. Eh oui, toutes les bases nosql n’ont pas abandonné la composante relationnelle. Et c’est bien ce qui m’intéresse ici car je veux jouer avec les profils inscrits sur "},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com",rel:[f,g,h],target:i},children:[{type:a,value:"HopWork"}]},{type:a,value:" en les reliant via leurs compétences."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Objectif pour moi, répondre à des questions simples :"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"les mots clés les plus utilisés. Cette requête sert pour la mise en jambe car elle ne profite pas des relations"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"les mots clés les plus souvent associés"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"chercher un profil “proche” vis à vis d’un autre en prenant en compte uniquement les mots clés"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:m,props:{id:v},children:[{type:b,tag:e,props:{href:"#le-chargement",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:a,value:w}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Première étape, on va charger les données à partir de MongoDB. Pour cela on va utiliser un simple main Java :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"       GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase( \"C:\u002Ftemp\u002Fgraphdb\" );\n       ExecutionEngine executionEngine = new ExecutionEngine(graphDb);"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"       MongoURI mongoURI = new MongoURI(\"mongodb:\u002F\u002Flocalhost\u002Fworkable\");\n       DB db = mongoURI.connectDB();\n       Jongo jongo = new Jongo(db);\n       MongoCollection profiles = jongo.getCollection(\"profiles\");"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"       profiles.find().as(Profile.class).forEach(profile -\u003E {\n            Map\u003CString, Object\u003E params = new HashMap\u003C\u003E();\n            params.put(\"id\", profile.getKey().toString());\n           executionEngine.execute(\"MERGE (p:PROFILE {key: {id}}) ON CREATE set p.created  = 'true' \", params);"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"           profile.getInfos().getKeyWords().forEach(keyword -\u003E {\n               params.put(\"keyword\", keyword);\n               executionEngine.execute(\"MERGE (k:KEYWORD {label: {keyword} }) ON CREATE set k.created  = 'true' \", params);\n               ExecutionResult relationResult = executionEngine.execute(\"MATCH (p:PROFILE {key: {id} }), (k:KEYWORD {label: {keyword} }) \" +\n                       \"CREATE UNIQUE p-[:SPECIALISES_IN]-\u003E k\", params);\n           });\n       });\n       graphDb.shutdown();"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Ici on utilise un executionEngine pour exécuter des requêtes "},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.neo4j.org\u002Flearn\u002Fcypher",rel:[f,g,h],target:i},children:[{type:a,value:"CYPHER"}]},{type:a,value:", le langage de requêtage pour Neo4J."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"On utilise "},{type:b,tag:e,props:{href:"http:\u002F\u002Fjongo.org\u002F",rel:[f,g,h],target:i},children:[{type:a,value:"Jongo"}]},{type:a,value:" pour interroger la base MongoDB."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"On remarquera l’utilisation de Java 8 pour itérer sur les collections, faut bien fêter la sortie de Java8 :)"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Les requêtes CYPHER utilisées pour insérer les noeuds profiles et les noeuds keywords ont pour but d’éviter d’insérer des doublons :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MERGE (k:KEYWORD {label: {keyword} }) ON CREATE set k.created  = 'true'"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"La requête pour insérer les relations entre keywords et profiles utilise CREATE UNIQUE pour éviter d’ajouter une relation déjà existante :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MATCH (p:PROFILE {key: {id} }), (k:KEYWORD {label: {keyword} })\nCREATE UNIQUE p-[:SPECIALISES_IN]-\u003Ek"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Ensuite il suffit d’utiliser la console Neo4j pour afficher le résultat :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2014\u002F03\u002F638d7-graph.png",rel:[f,g,h],target:i},children:[{type:b,tag:B,props:{alt:"graph",src:"\u002Fimages\u002F638d7-graph.png"},children:[]}]}]},{type:a,value:c},{type:b,tag:m,props:{id:x},children:[{type:b,tag:e,props:{href:"#quelques-requ%C3%AAtes",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Désormais nous avons nos données, essayons quelques requêtes."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Pour exécuter ces requêtes, la console Neo4j va rapidement montrer ces limites. J’ai souhaité utiliser une autre console un peu plus sympathique, "},{type:b,tag:e,props:{href:"https:\u002F\u002Fgithub.com\u002Fneo4j-contrib\u002Frabbithole",rel:[f,g,h],target:i},children:[{type:a,value:"rabbithole"}]},{type:a,value:". Malheureusement je n’ai pas réussi à la démarrer pour des erreurs cryptiques en tant que débutant. Je suis donc reparti sur une exécution en Java."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Quels sont les mots clés les plus utilisés :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MATCH (:PROFILE)-[s:SPECIALISES_IN]-\u003E(k:KEYWORD)"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"RETURN k, count(s) AS relCount"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ORDER BY relCount DESC"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"LIMIT 10;"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Le résultat sur les données de production HopWork:"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"+--------------------------------------------------------+\n| k                                           | relCount |\n+--------------------------------------------------------+\n| Node[67]{created:\"true\",label:\"web\"}        | 183      |\n| Node[403]{created:\"true\",label:\"php\"}       | 148      |\n| Node[58]{created:\"true\",label:\"webdesign\"}  | 145      |\n| Node[39]{created:\"true\",label:\"javascript\"} | 127      |\n| Node[451]{created:\"true\",label:\"wordpress\"} | 122      |\n| Node[50]{created:\"true\",label:\"logo\"}       | 107      |\n| Node[120]{created:\"true\",label:\"css\"}       | 103      |\n| Node[18]{created:\"true\",label:\"graphiste\"}  | 101      |\n| Node[125]{created:\"true\",label:\"PHP\"}       | 100      |\n| Node[1]{created:\"true\",label:\"Java\"}        | 100      |\n+--------------------------------------------------------+"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"On remarque évidemment tout de suite que PHP et php sont comptées différemment. Bon, je m’en doutais lors de l’insertion, il y a une grosse phase de normalisation à faire sur les mots clés. Déjà il aurait fallu s’occuper des différences de casses, mais aussi des synonymes (J2EE JEE) ou des regroupements (php relié à php5, php6 etc…)."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Tant pis pour l’instant."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Quels sont les couples de mots clés les plus souvent associés :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MATCH (k2:KEYWORD)\u003C-[:SPECIALISES_IN]-(:PROFILE)-[:SPECIALISES_IN]-\u003E(k1:KEYWORD)\nWITH CASE k1.label \u003E k2.label\nWHEN true THEN k1.label + '_' + k2.label\nELSE k2.label + '_' + k1.label\nEND AS result\nRETURN DISTINCT(result), COUNT(result)\u002F2 AS count\nORDER BY count DESC\nLIMIT 10;"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Bon là clairement c’est une requête très peu optimisé et le temps d’exécution sur les données d’HopWork est… infini. Je vais faire appel à un ami (Florent) pour l’améliorer :)"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Et la dernière requête, partant de mon profil, qui est le plus proche de moi sur HopWork en comptant le nombre de mots clés en commun (faite par Florent) :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MATCH (currentProfile:PROFILE { id:123 })-[:SPECIALISES_IN]-\u003E(k:KEYWORD)\u003C-[:SPECIALISES_IN]-(otherProfile:PROFILE)\nRETURN otherProfile, collect(k), COUNT(k) AS keywordCount\nORDER BY keywordCount DESC LIMIT 6;"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:s}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| otherProfile                                              | collect(k.label)                                       | keywordCount |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:s}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| Node[4205]{key:\""},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com\u002Fprofile\u002F529c7d944168100d169d8b40",rel:[f,g,h],target:i},children:[{type:a,value:"Raphael"}]},{type:a,value:"\",created:\"true\"} | [\"javascript\",\"mongodb\",\"elasticsearch\",\"performance\"] | 4            |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| Node[3302]{key:\""},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com\u002Fprofile\u002F5103d8bed393273e34aefef8",rel:[f,g,h],target:i},children:[{type:a,value:"Sylvain"}]},{type:a,value:"\",created:\"true\"} | [\"javascript\",\"elasticsearch\",\"nosql\",\"mongodb\"]       | 4            |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| Node[6351]{key:\""},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com\u002Fprofile\u002F512c8545d393273e34af01bd",rel:[f,g,h],target:i},children:[{type:a,value:"Katia"}]},{type:a,value:"\",created:\"true\"} | [\"nosql\",\"javascript\",\"mongodb\"]                       | 3            |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| Node[3265]{key:\""},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com\u002Fprofile\u002F5241ac2e1e92c51c7c4919b7",rel:[f,g,h],target:i},children:[{type:a,value:"Zahir"}]},{type:a,value:"\",created:\"true\"} | [\"mongodb\",\"backbone\",\"javascript\"]                    | 3            |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| Node[3452]{key:\""},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com\u002Fprofile\u002F526537bc4168100d169ce2e9",rel:[f,g,h],target:i},children:[{type:a,value:"Maxence"}]},{type:a,value:"\",created:\"true\"} | [\"elasticsearch\",\"mongodb\",\"javascript\"]               | 3            |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"| Node[4869]{key:\""},{type:b,tag:e,props:{href:"http:\u002F\u002Fwww.hopwork.com\u002Fprofile\u002F517989e92a07e9483ddedcdd",rel:[f,g,h],target:i},children:[{type:a,value:"Arnault"}]},{type:a,value:"\",created:\"true\"} | [\"mongodb\",\"elasticsearch\",\"performance\"]              | 3            |"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:s}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"(J'ai remplacé les id par les liens vers les profils HopWork pour les besoins du billet)"}]},{type:a,value:c},{type:b,tag:m,props:{id:z},children:[{type:b,tag:e,props:{href:"#avis-au-bout-dune-journ%C3%A9e",ariaHidden:n,tabIndex:o},children:[{type:b,tag:p,props:{className:[q,r]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Dans l’ensemble, on voit un peu comment pourrait se dessiner un moteur de recommandation basé sur un graphe des données dans HopWork. L’outil est intéressant, un peu raide à prendre en main car les infos restent assez parcellaires sur le net. Je prends juste l’exemple des paramètres nommés dans une requête CYPHER, rien dans la doc n’explique le format attendu."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Je suis bien conscient que je suis resté très en surface mais l’outil et ses applications font que j’y retournerais sans doute très prochainement."}]}]},dir:"\u002Farticles\u002F2014\u002F03\u002F19",path:"\u002Farticles\u002F2014\u002F03\u002F19\u002Fexploiter-les-donnees-dhopwork-avec-neo4j-timeoff-2nd-journee",extension:".md",createdAt:E,updatedAt:E,bodyPlainText:"\nneo4jSecond jour\") de timeoff\") Lateral-Thoughts, je tente toujours de me tenir à un billet par jour. Et aujourd’hui ce post concernera Neo4J.\n\nNeo4j fait partie des bases de données orientée graphe. Chez LT nous avons la chance d’avoir Florent Biville qui maîtrise bien le sujet et j’ai un peu profité de lui, en tout bien tout honneur, pour me faire un peu guider dessus.\n\nUne base de données graphe par définition c’est une base qui traite de relation. Eh oui, toutes les bases nosql n’ont pas abandonné la composante relationnelle. Et c’est bien ce qui m’intéresse ici car je veux jouer avec les profils inscrits sur HopWork en les reliant via leurs compétences.\n\nObjectif pour moi, répondre à des questions simples :\n\nles mots clés les plus utilisés. Cette requête sert pour la mise en jambe car elle ne profite pas des relations\nles mots clés les plus souvent associés\nchercher un profil “proche” vis à vis d’un autre en prenant en compte uniquement les mots clés\n\nLe chargement\n\nPremière étape, on va charger les données à partir de MongoDB. Pour cela on va utiliser un simple main Java :\n\n \n\n       GraphDatabaseService graphDb = new GraphDatabaseFactory().newEmbeddedDatabase( \"C:\u002Ftemp\u002Fgraphdb\" );\n       ExecutionEngine executionEngine = new ExecutionEngine(graphDb);\n\n       MongoURI mongoURI = new MongoURI(\"mongodb:\u002F\u002Flocalhost\u002Fworkable\");\n       DB db = mongoURI.connectDB();\n       Jongo jongo = new Jongo(db);\n       MongoCollection profiles = jongo.getCollection(\"profiles\");\n\n       profiles.find().as(Profile.class).forEach(profile -\u003E {\n            Map params = new HashMap();\n            params.put(\"id\", profile.getKey().toString());\n           executionEngine.execute(\"MERGE (p:PROFILE {key: {id}}) ON CREATE set p.created  = 'true' \", params);\n\n           profile.getInfos().getKeyWords().forEach(keyword -\u003E {\n               params.put(\"keyword\", keyword);\n               executionEngine.execute(\"MERGE (k:KEYWORD {label: {keyword} }) ON CREATE set k.created  = 'true' \", params);\n               ExecutionResult relationResult = executionEngine.execute(\"MATCH (p:PROFILE {key: {id} }), (k:KEYWORD {label: {keyword} }) \" +\n                       \"CREATE UNIQUE p-\\[:SPECIALISES\\_IN\\]-\u003E k\", params);\n           });\n       });\n       graphDb.shutdown();\n\nIci on utilise un executionEngine pour exécuter des requêtes CYPHER, le langage de requêtage pour Neo4J.\n\nOn utilise Jongo pour interroger la base MongoDB.\n\nOn remarquera l’utilisation de Java 8 pour itérer sur les collections, faut bien fêter la sortie de Java8 :)\n\n \n\nLes requêtes CYPHER utilisées pour insérer les noeuds profiles et les noeuds keywords ont pour but d’éviter d’insérer des doublons :\n\nMERGE (k:KEYWORD {label: {keyword} }) ON CREATE set k.created  = 'true'\n\n \n\nLa requête pour insérer les relations entre keywords et profiles utilise CREATE UNIQUE pour éviter d’ajouter une relation déjà existante :\n\n \n\nMATCH (p:PROFILE {key: {id} }), (k:KEYWORD {label: {keyword} })\nCREATE UNIQUE p-\\[:SPECIALISES\\_IN\\]-\u003Ek\n\nEnsuite il suffit d’utiliser la console Neo4j pour afficher le résultat :\n\ngraph\n\nQuelques requêtes\n\nDésormais nous avons nos données, essayons quelques requêtes.\n\nPour exécuter ces requêtes, la console Neo4j va rapidement montrer ces limites. J’ai souhaité utiliser une autre console un peu plus sympathique, rabbithole. Malheureusement je n’ai pas réussi à la démarrer pour des erreurs cryptiques en tant que débutant. Je suis donc reparti sur une exécution en Java.\n\nQuels sont les mots clés les plus utilisés :\n\nMATCH (:PROFILE)-\\[s:SPECIALISES\\_IN\\]-\u003E(k:KEYWORD)\n\nRETURN k, count(s) AS relCount\n\nORDER BY relCount DESC\n\nLIMIT 10;\n\n \n\nLe résultat sur les données de production HopWork:\n\n+--------------------------------------------------------+\n| k                                           | relCount |\n+--------------------------------------------------------+\n| Node\\[67\\]{created:\"true\",label:\"web\"}        | 183      |\n| Node\\[403\\]{created:\"true\",label:\"php\"}       | 148      |\n| Node\\[58\\]{created:\"true\",label:\"webdesign\"}  | 145      |\n| Node\\[39\\]{created:\"true\",label:\"javascript\"} | 127      |\n| Node\\[451\\]{created:\"true\",label:\"wordpress\"} | 122      |\n| Node\\[50\\]{created:\"true\",label:\"logo\"}       | 107      |\n| Node\\[120\\]{created:\"true\",label:\"css\"}       | 103      |\n| Node\\[18\\]{created:\"true\",label:\"graphiste\"}  | 101      |\n| Node\\[125\\]{created:\"true\",label:\"PHP\"}       | 100      |\n| Node\\[1\\]{created:\"true\",label:\"Java\"}        | 100      |\n+--------------------------------------------------------+\n\n \n\nOn remarque évidemment tout de suite que PHP et php sont comptées différemment. Bon, je m’en doutais lors de l’insertion, il y a une grosse phase de normalisation à faire sur les mots clés. Déjà il aurait fallu s’occuper des différences de casses, mais aussi des synonymes (J2EE JEE) ou des regroupements (php relié à php5, php6 etc…).\n\n \n\nTant pis pour l’instant.\n\n \n\nQuels sont les couples de mots clés les plus souvent associés :\n\nMATCH (k2:KEYWORD)(k1:KEYWORD)\nWITH CASE k1.label \u003E k2.label\nWHEN true THEN k1.label + '\\_' + k2.label\nELSE k2.label + '\\_' + k1.label\nEND AS result\nRETURN DISTINCT(result), COUNT(result)\u002F2 AS count\nORDER BY count DESC\nLIMIT 10;\n\nBon là clairement c’est une requête très peu optimisé et le temps d’exécution sur les données d’HopWork est… infini. Je vais faire appel à un ami (Florent) pour l’améliorer :)\n\n \n\nEt la dernière requête, partant de mon profil, qui est le plus proche de moi sur HopWork en comptant le nombre de mots clés en commun (faite par Florent) :\n\nMATCH (currentProfile:PROFILE { id:123 })-\\[:SPECIALISES\\_IN\\]-\u003E(k:KEYWORD)\u003C-\\[:SPECIALISES\\_IN\\]-(otherProfile:PROFILE)\nRETURN otherProfile, collect(k), COUNT(k) AS keywordCount\nORDER BY keywordCount DESC LIMIT 6;\n\n+-----------------------------------------------------------------------------------------------------------------------------------+\n\n| otherProfile                                              | collect(k.label)                                       | keywordCount |\n\n+-----------------------------------------------------------------------------------------------------------------------------------+\n\n| Node\\[4205\\]{key:\"Raphael\",created:\"true\"} | \\[\"javascript\",\"mongodb\",\"elasticsearch\",\"performance\"\\] | 4            |\n\n| Node\\[3302\\]{key:\"Sylvain\",created:\"true\"} | \\[\"javascript\",\"elasticsearch\",\"nosql\",\"mongodb\"\\]       | 4            |\n\n| Node\\[6351\\]{key:\"Katia\",created:\"true\"} | \\[\"nosql\",\"javascript\",\"mongodb\"\\]                       | 3            |\n\n| Node\\[3265\\]{key:\"Zahir\",created:\"true\"} | \\[\"mongodb\",\"backbone\",\"javascript\"\\]                    | 3            |\n\n| Node\\[3452\\]{key:\"Maxence\",created:\"true\"} | \\[\"elasticsearch\",\"mongodb\",\"javascript\"\\]               | 3            |\n\n| Node\\[4869\\]{key:\"Arnault\",created:\"true\"} | \\[\"mongodb\",\"elasticsearch\",\"performance\"\\]              | 3            |\n\n+-----------------------------------------------------------------------------------------------------------------------------------+\n\n(J'ai remplacé les id par les liens vers les profils HopWork pour les besoins du billet)\n\nAvis au bout d’une journée\n\nDans l’ensemble, on voit un peu comment pourrait se dessiner un moteur de recommandation basé sur un graphe des données dans HopWork. L’outil est intéressant, un peu raide à prendre en main car les infos restent assez parcellaires sur le net. Je prends juste l’exemple des paramètres nommés dans une requête CYPHER, rien dans la doc n’explique le format attendu.\n\nJe suis bien conscient que je suis resté très en surface mais l’outil et ses applications font que j’y retournerais sans doute très prochainement.\n",readTime:{text:"5 min read",minutes:4.605,time:276300,words:921}},relatedArticles:[{slug:"on-devrait-toujours-travailler-comme-ca-bis",description:"[![redcrabe](\u002Fimages\u002Fredcrabe2.jpg)](http:\u002F\u002Fwww.eventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2013\u002F03\u002Fredcrabe21.jpg)Ca s’appelle du plagiat. Car c’était [l...",id:"1002",title:D,date:"2013-12-08",tags:["lateralthoughts",j],img:"redcrabe2.jpg",cover:"cover6.jpg",path:"\u002Farticles\u002F2013\u002F12\u002F08\u002Fon-devrait-toujours-travailler-comme-ca-bis"},{slug:"ansible-timeoff-lt-1ere-journee",description:"[![ansible](\u002Fimages\u002F5570d-ansible.png)](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2014\u002F03\u002F5570d-ansible.png)Nous y voici ! Le timeoff Lateral-Tho...",id:"1051",title:C,date:"2014-03-17",tags:["ansible","devops","fabric",j],img:"5570d-ansible.png",cover:u,path:"\u002Farticles\u002F2014\u002F03\u002F17\u002Fansible-timeoff-lt-1ere-journee"}],_img:{"/_ipx/_/hugo-nb.jpg":"\u002F_nuxt\u002Fimage\u002Fc3e54c.jpg"}}],fetch:{},mutations:void 0}}("text","element","\n","p","a","nofollow","noopener","noreferrer","_blank","timeoff",2,"li","h2","true",-1,"span","icon","icon-link","+-----------------------------------------------------------------------------------------------------------------------------------+","neo4j","cover4.jpg","le-chargement","Le chargement","quelques-requêtes","Quelques requêtes","avis-au-bout-dune-journée","Avis au bout d’une journée","img","Ansible (timeoff LT 1ère journée)","On devrait toujours travailler comme ça (bis)","2022-05-22T13:41:26.747Z")));