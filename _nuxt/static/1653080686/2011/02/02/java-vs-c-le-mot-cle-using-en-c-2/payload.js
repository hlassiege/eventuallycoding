__NUXT_JSONP__("/2011/02/02/java-vs-c-le-mot-cle-using-en-c-2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){return {data:[{article:{slug:"java-vs-c-le-mot-cle-using-en-c-2",description:"[![](\u002Fimages\u002Fjavac1.png \"javac\")](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png) **Warning, warning,** ceci n'est pas une rubrique...",id:"146",title:"Java Vs C# : le mot clé using en C#",date:"2011-02-02",categories:["waza"],tags:[e,f],img:h,cover:"cover1.jpg",toc:[{id:i,depth:3,text:j}],body:{type:"root",children:[{type:b,tag:c,props:{},children:[{type:b,tag:g,props:{href:"http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png",rel:[k,l,m],target:n},children:[{type:b,tag:"img",props:{alt:o,src:"\u002Fimages\u002Fjavac1.png",title:"javac"},children:[]}]},{type:a,value:" "},{type:b,tag:"strong",props:{},children:[{type:a,value:"Warning, warning,"}]},{type:a,value:" ceci n'est pas une rubrique à troll !!"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Bien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre."}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Et donc le truc qui tue du jour :"}]},{type:a,value:d},{type:b,tag:"h3",props:{id:i},children:[{type:b,tag:g,props:{href:"#le-mot-cl%C3%A9-using-en-c",ariaHidden:"true",tabIndex:-1},children:[{type:b,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:j}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Je ne vous l'apprends pas (enfin j'espère) en Java et en C#, on a l'habitude d'utiliser des blocs finally pour fermer les ressources proprement en cas d'exception."}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Par exemple :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"InputStream   input = null;\ntry\n{\ninput = new FileInputStream(fileName);\n\u002F\u002F...process input stream...\n}catch (IOException e)\n{\n\u002F\u002F do something\n}\nfinally\n{\nif(input != null)\n{\ntry\n{\ninput.close();\n}\ncatch(IOException e)\n{\n}\n}\n}"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Verbeux n'est ce pas ?"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"En C# le truc qui tue ? Pas besoin de bloc finally, la fermeture des ressources peut être faite automatiquement avec la syntaxe suivante :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"using (System.IO.StreamReader sr = new System.IO.StreamReader(@\"C:UsersPublicDocumentstest.txt\"))\n{  �\nstring s = null;  �\nwhile((s = sr.ReadLine()) != null)  �\n{      �\nConsole.WriteLine(s);  �\n}\n}"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Le mot clé using permet de désigner les ressources à fermer à la fin du bloc. Ces ressources implémentent l'interface IDisposable."}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Mais un peu d'espoir quand même pour les javaistes, "},{type:b,tag:g,props:{href:"http:\u002F\u002Fblog.developpez.com\u002Fadiguba\u002Fp9231\u002Fjava\u002Ftry-with-resources\u002F#more9231",rel:[k,l,m],target:n},children:[{type:a,value:"la fonctionnalité est prévue pour JDK7"}]},{type:a,value:" avec les blocs ARM :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"public void copy(String sourceFile, String destFile) throws IOException\n{\ntry (InputStream input = new FileInputStream(sourceFile); OutputStream output = new FileOutputStream(destFile) )\n{\nbyte[] buf = new byte[8192];\nint len;\nwhile ( (len=input.read(buf)) \u003E= 0 )\n{\noutput.write(buf, 0, len);\n}\n}\n}"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"En plus j'apprécie qu'ils aient réutilisé le mot clé try pour les gérer, ca porte moins à confusion que using en C# qui est déjà utilisé pour les imports."}]}]},dir:"\u002Farticles\u002F2011\u002F02\u002F02",path:"\u002Farticles\u002F2011\u002F02\u002F02\u002Fjava-vs-c-le-mot-cle-using-en-c-2",extension:".md",createdAt:p,updatedAt:p,bodyPlainText:"\n Warning, warning, ceci n'est pas une rubrique à troll !!\n\nBien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre.\n\nEt donc le truc qui tue du jour :\n\nle mot clé using en C#\n\nJe ne vous l'apprends pas (enfin j'espère) en Java et en C#, on a l'habitude d'utiliser des blocs finally pour fermer les ressources proprement en cas d'exception.\n\nPar exemple :\n\nInputStream   input = null;\ntry\n{\n    input = new FileInputStream(fileName);\n    \u002F\u002F...process input stream...\n}catch (IOException e)\n{\n    \u002F\u002F do something\n}\nfinally\n{\n    if(input != null)\n    {\n       try\n       {\n           input.close();\n       }\n       catch(IOException e)\n       {\n       }\n   }\n}\n\nVerbeux n'est ce pas ?\n\nEn C# le truc qui tue ? Pas besoin de bloc finally, la fermeture des ressources peut être faite automatiquement avec la syntaxe suivante :\n\nusing (System.IO.StreamReader sr = new System.IO.StreamReader(@\"C:UsersPublicDocumentstest.txt\"))\n{  �\n string s = null;  �\n while((s = sr.ReadLine()) != null)  �\n {      �\n Console.WriteLine(s);  �\n }\n}\n\nLe mot clé using permet de désigner les ressources à fermer à la fin du bloc. Ces ressources implémentent l'interface IDisposable.\n\nMais un peu d'espoir quand même pour les javaistes, la fonctionnalité est prévue pour JDK7 avec les blocs ARM :\n\npublic void copy(String sourceFile, String destFile) throws IOException\n{\n\ttry (InputStream input = new FileInputStream(sourceFile); OutputStream output = new FileOutputStream(destFile) )\n\t{\n\t\tbyte\\[\\] buf = new byte\\[8192\\];\n\t\tint len;\n\t\twhile ( (len=input.read(buf)) \u003E= 0 )\n\t\t{\n\t\t\toutput.write(buf, 0, len);\n\t\t}\n\t}\n}\n\nEn plus j'apprécie qu'ils aient réutilisé le mot clé try pour les gérer, ca porte moins à confusion que using en C# qui est déjà utilisé pour les imports.\n",readTime:{text:"2 min read",minutes:1.55,time:93000,words:310}},relatedArticles:[{slug:"integration-gwt-maven-spring-hibernate-spring-security-smartgwt",description:"Ca y est, l'article que j'avais démarré sur GWT et son intégration avec Spring, maven, SmartGwt et Hibernate est enfin sorti dans sa version finale. I...",id:"138",title:"Intégration GWT-maven-spring-hibernate-spring security-smartGWT",date:"2009-12-02",tags:["gwt","hibernate",f,"maven","spring"],img:o,cover:"cover7.jpg",path:"\u002Farticles\u002F2009\u002F12\u002F02\u002Fintegration-gwt-maven-spring-hibernate-spring-security-smartgwt"},{slug:"java-vs-c-les-types-valeurs-en-c",description:"[![](\u002Fimages\u002Fjavac1.png \"javac\")](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png)\n**Warning, warning,** ceci n'est pas une rubriqu...",id:"324",title:"Java Vs C# : Les types valeurs en C#",date:"2011-05-01",tags:[e,f],img:h,cover:"cover4.jpg",path:"\u002Farticles\u002F2011\u002F05\u002F01\u002Fjava-vs-c-les-types-valeurs-en-c"},{slug:"bonnes-pratique-de-codage-en-c-2",description:"Dans la lignée d'un [billet précédent](http:\u002F\u002Flocalhost\u002Flocalweb\u002Fwordpress\u002F?p=144 \"Introduction aux tests unitaires et aux bouchons en C#\") qui consti...",id:"145",title:"Bonnes pratique de codage en C#",date:"2010-11-28",tags:[e,"testunitaire"],img:"linkext7.gif",cover:"cover3.jpg",path:"\u002Farticles\u002F2010\u002F11\u002F28\u002Fbonnes-pratique-de-codage-en-c-2"}],_img:{"/_ipx/_/hugo-nb.jpg":"\u002F_nuxt\u002Fimage\u002Fc3e54c.jpg"}}],fetch:{},mutations:void 0}}("text","element","p","\n","csharp","java","a","javac1.png","le-mot-clé-using-en-c","le mot clé using en C#","nofollow","noopener","noreferrer","_blank","","2022-05-20T21:03:21.500Z")));