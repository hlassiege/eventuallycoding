__NUXT_JSONP__("/2011/03/18/java-vs-c-les-property-en-c", (function(a,b,c,d,e,f,g,h,i,j,k,l){return {data:[{article:{slug:"java-vs-c-les-property-en-c",description:"[![](\u002Fimages\u002Fjavac1.png \"javac\")](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png) **Warning, warning,** ceci n'est pas une rubrique...",id:"148",title:"Java Vs C# : Les Property en C#",date:"2011-03-18",categories:["waza"],tags:[f,e],img:g,cover:"cover3.jpg",toc:[{id:h,depth:3,text:i}],body:{type:"root",children:[{type:b,tag:c,props:{},children:[{type:b,tag:j,props:{href:"http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:b,tag:"img",props:{alt:"",src:"\u002Fimages\u002Fjavac1.png",title:"javac"},children:[]}]},{type:a,value:" "},{type:b,tag:"strong",props:{},children:[{type:a,value:"Warning, warning,"}]},{type:a,value:" ceci n'est pas une rubrique à troll !!"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Bien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre."}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Et donc le truc qui tue du jour :"}]},{type:a,value:d},{type:b,tag:"h3",props:{id:h},children:[{type:b,tag:j,props:{href:"#les-property-en-c",ariaHidden:"true",tabIndex:-1},children:[{type:b,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:i}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"En C# comme en Java on respecte le principe d'encapsulation sur les attributs des classes. C'est à dire que les attributs sont déclarées private et ensuite on définit des getters et setters pour y accéder :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"private int maVariable;"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"public void setMaVariable (int maVariable)\n{\nthis.maVariable = maVariable;\n}\npubic int getMaVariable ()\n{\nreturn maVariable;\n}"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Seul inconvénient, il est plus verbeux d'écrire ceci"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"maClasse.setMaVariable (maClasse.getMaVariable()+1)"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"que directement"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"maClasse.maVariable++;"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"En C# existe la notion de Property qui permet d'éviter l'utilisation de getter et setter :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"public double Hours\n{\nget\n{\nreturn seconds \u002F 3600;\n}\nset\n{\nseconds = value * 3600;\n}\n}"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Ce qui permet d'écrire :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"maClasse.Hours = maClasse.Hours + 1;"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"et qui reviendra à :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"maClasse.setSeconds (maClasse.getSeconds() + 1);"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Et depuis la version 3.0, on peut même utiliser des la notion de Property auto-implémenté lorsque les getters et setters ne font rien de spécial :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"public int ID { get; set; }"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Et en Java ?"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"A priori rien de prévu pour imiter cette syntaxe en Java pour l'instant. Cependant certains frameworks utilisent l'instrumentation de code pour reproduire le même comportement. Avec Play! la syntaxe est même allégé par rapport aux Property de C# :"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"public int maVariable;\n...\nmonObjet.maVariable = monObjet.maVariable+1;"}]},{type:a,value:d},{type:b,tag:c,props:{},children:[{type:a,value:"Les getters et setters sont automatiquement générés par Play. Si cependant un getter ou un setter a été défini, il sera utilisé à la place des accesseurs générés par Play!."}]}]},dir:"\u002Farticles\u002F2011\u002F03\u002F18",path:"\u002Farticles\u002F2011\u002F03\u002F18\u002Fjava-vs-c-les-property-en-c",extension:".md",createdAt:k,updatedAt:k,bodyPlainText:"\n Warning, warning, ceci n'est pas une rubrique à troll !!\n\nBien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre.\n\nEt donc le truc qui tue du jour :\n\nLes Property en C#\n\nEn C# comme en Java on respecte le principe d'encapsulation sur les attributs des classes. C'est à dire que les attributs sont déclarées private et ensuite on définit des getters et setters pour y accéder :\n\n \n\nprivate int maVariable;\n\npublic void setMaVariable (int maVariable)\n{\n    this.maVariable = maVariable;\n}\npubic int getMaVariable ()\n{\n    return maVariable;\n}\n\nSeul inconvénient, il est plus verbeux d'écrire ceci\n\nmaClasse.setMaVariable (maClasse.getMaVariable()+1)\n\nque directement\n\nmaClasse.maVariable++;\n\nEn C# existe la notion de Property qui permet d'éviter l'utilisation de getter et setter :\n\npublic double Hours\n{\n    get\n   {\n        return seconds \u002F 3600;\n   }\n   set\n   {\n       seconds = value \\* 3600;\n   }\n}\n\nCe qui permet d'écrire :\n\nmaClasse.Hours = maClasse.Hours + 1;\n\net qui reviendra à :\n\nmaClasse.setSeconds (maClasse.getSeconds() + 1);\n\nEt depuis la version 3.0, on peut même utiliser des la notion de Property auto-implémenté lorsque les getters et setters ne font rien de spécial :\n\npublic int ID { get; set; }\n\nEt en Java ?\n\nA priori rien de prévu pour imiter cette syntaxe en Java pour l'instant. Cependant certains frameworks utilisent l'instrumentation de code pour reproduire le même comportement. Avec Play! la syntaxe est même allégé par rapport aux Property de C# :\n\npublic int maVariable;\n...\nmonObjet.maVariable = monObjet.maVariable+1;\n\nLes getters et setters sont automatiquement générés par Play. Si cependant un getter ou un setter a été défini, il sera utilisé à la place des accesseurs générés par Play!.\n",readTime:{text:"2 min read",minutes:1.59,time:95400,words:318}},relatedArticles:[{slug:"luke-que-la-force-soit-avec-toi",description:"Vous connaissez [Lucene](http:\u002F\u002Flucene.apache.org\u002Fjava\u002Fdocs\u002F \"Lucene\") ? Non ? Dans ce cas je vous invite fortement à découvrir cette API utilisé dans...",id:"139",title:"Luke, que la force soit avec toi !",date:"2009-12-06",tags:[e,"lucene"],img:"ouverturefichier.png",cover:"cover7.jpg",path:"\u002Farticles\u002F2009\u002F12\u002F06\u002Fluke-que-la-force-soit-avec-toi"},{slug:"java-vs-c-les-types-valeurs-en-c",description:"[![](\u002Fimages\u002Fjavac1.png \"javac\")](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png)\n**Warning, warning,** ceci n'est pas une rubriqu...",id:"324",title:"Java Vs C# : Les types valeurs en C#",date:"2011-05-01",tags:[f,e],img:g,cover:l,path:"\u002Farticles\u002F2011\u002F05\u002F01\u002Fjava-vs-c-les-types-valeurs-en-c"},{slug:"substance-une-librairie-hype-pour-swing",description:"Mon [dernier billet sur Swing](index.php\u002Fthe-news\u002F51-swing-or-not-swing \"Swing or not swing\") pouvait paraître pessimiste puisque je parlais de cette ...",id:"136",title:"Substance, une librairie \"hype\" pour Swing",date:"2009-11-05",tags:[e,"substance","swing"],img:"button.png",cover:l,path:"\u002Farticles\u002F2009\u002F11\u002F05\u002Fsubstance-une-librairie-hype-pour-swing"}],_img:{"/_ipx/_/hugo-nb.jpg":"\u002F_nuxt\u002Fimage\u002Fc3e54c.jpg"}}],fetch:{},mutations:void 0}}("text","element","p","\n","java","csharp","javac1.png","les-property-en-c","Les Property en C#","a","2022-05-27T16:08:26.893Z","cover4.jpg")));