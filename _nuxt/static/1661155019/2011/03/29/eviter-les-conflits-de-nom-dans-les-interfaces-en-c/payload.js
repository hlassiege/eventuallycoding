__NUXT_JSONP__("/2011/03/29/eviter-les-conflits-de-nom-dans-les-interfaces-en-c", (function(a,b,c,d,e,f,g,h,i,j,k,l,m){return {data:[{article:{slug:e,description:h,id:"286",title:"Java Vs C# : Eviter les conflits de nom dans les interfaces",date:"2011-03-29",categories:["waza"],tags:[f,g],img:i,cover:"cover7.jpg",toc:[{id:e,depth:3,text:j}],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:b,tag:k,props:{href:"http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:b,tag:"img",props:{alt:"",src:"\u002Fimages\u002Fjavac1.png",title:"javac"},children:[]}]},{type:a,value:" "},{type:b,tag:"strong",props:{},children:[{type:a,value:"Warning, warning,"}]},{type:a,value:" ceci n'est pas une rubrique à troll !!"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Bien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Et donc le truc qui tue du jour :"}]},{type:a,value:c},{type:b,tag:"h3",props:{id:e},children:[{type:b,tag:k,props:{href:"#eviter-les-conflits-de-nom-dans-les-interfaces-en-c",ariaHidden:"true",tabIndex:-1},children:[{type:b,tag:"span",props:{className:["icon","icon-link"]},children:[]}]},{type:a,value:j}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"En java vous avez sans doute déjà eu affaire à des interfaces dont les noms rentrent en conflit, non ?"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Dans le cas contraire, je vous propose un petit exemple :"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"public interface IInterface1\n{\nvoid execute();\n}"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"public interface IInterface2\n{\nvoid execute();\n}"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"public class MyClass implements IInterface1, IInterface2\n{\npublic void execute()\n{\n\u002F\u002F  ??\n}\n}"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Rageant n'est-ce pas ? Vous tentez de respecter un contrat identique défini par deux interfaces."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Et en C# ?"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"C# propose une solution intéressante à ce problème."}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"public interface IInterface1\n{\nvoid Execute();\n}"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"public interface IInterface2\n{\nvoid Execute();\n}"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"public class MyClass : IInterface1, IInterface2\n{\nvoid IInterface1.Execute()\n{\nConsole.WriteLine(\"Execute de IInterface1\");\n}"}]},{type:a,value:c},{type:b,tag:"div",props:{className:["nuxt-content-highlight"]},children:[{type:b,tag:"pre",props:{className:["language-text","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:a,value:"void IInterface2.Execute()\n{\n     Console.WriteLine(\"Execute de IInterface2\");\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"}"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"On remarquera que les méthodes sont privées. Elles ne peuvent être appelées qu'à partir de l'interface. Ce qui est beaucoup plus propre."}]}]},dir:"\u002Farticles\u002F2011\u002F03\u002F29",path:"\u002Farticles\u002F2011\u002F03\u002F29\u002Feviter-les-conflits-de-nom-dans-les-interfaces-en-c",extension:".md",createdAt:l,updatedAt:l,bodyPlainText:"\n Warning, warning, ceci n'est pas une rubrique à troll !!\n\nBien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre.\n\nEt donc le truc qui tue du jour :\n\nEviter les conflits de nom dans les interfaces en C#\n\nEn java vous avez sans doute déjà eu affaire à des interfaces dont les noms rentrent en conflit, non ?\n\nDans le cas contraire, je vous propose un petit exemple :\n\npublic interface IInterface1\n{\n    void execute();\n}\n\npublic interface IInterface2\n{\n    void execute();\n}\n\npublic class MyClass implements IInterface1, IInterface2\n{\n      public void execute()\n\t  {\n\t     \u002F\u002F  ??\n\t  }\n}\n\nRageant n'est-ce pas ? Vous tentez de respecter un contrat identique défini par deux interfaces.\n\nEt en C# ?\n\nC# propose une solution intéressante à ce problème.\n\npublic interface IInterface1\n{\n    void Execute();\n}\n\npublic interface IInterface2\n{\n    void Execute();\n}\n\npublic class MyClass : IInterface1, IInterface2\n{\n\tvoid IInterface1.Execute()\n\t{\n         Console.WriteLine(\"Execute de IInterface1\");\n\t}\n\n    void IInterface2.Execute()\n\t{\n         Console.WriteLine(\"Execute de IInterface2\");\n    }\n}\n\nOn remarquera que les méthodes sont privées. Elles ne peuvent être appelées qu'à partir de l'interface. Ce qui est beaucoup plus propre.\n",readTime:{text:"2 min read",minutes:1.15,time:69000,words:230}},relatedArticles:[{slug:"bonnes-pratique-de-codage-en-c-2",description:"Dans la lignée d'un [billet précédent](http:\u002F\u002Flocalhost\u002Flocalweb\u002Fwordpress\u002F?p=144 \"Introduction aux tests unitaires et aux bouchons en C#\") qui consti...",id:"145",title:"Bonnes pratique de codage en C#",date:"2010-11-28",tags:[f,"testunitaire"],img:"linkext7.gif",cover:m,path:"\u002Farticles\u002F2010\u002F11\u002F28\u002Fbonnes-pratique-de-codage-en-c-2"},{slug:"substance-une-librairie-hype-pour-swing",description:"Mon [dernier billet sur Swing](index.php\u002Fthe-news\u002F51-swing-or-not-swing \"Swing or not swing\") pouvait paraître pessimiste puisque je parlais de cette ...",id:"136",title:"Substance, une librairie \"hype\" pour Swing",date:"2009-11-05",tags:[g,"substance","swing"],img:"button.png",cover:"cover4.jpg",path:"\u002Farticles\u002F2009\u002F11\u002F05\u002Fsubstance-une-librairie-hype-pour-swing"},{slug:"java-vs-c-la-gestion-des-exceptions",description:h,id:"143",title:"Java Vs C# : La gestion des exceptions",date:"2011-03-23",tags:[f,g],img:i,cover:m,path:"\u002Farticles\u002F2011\u002F03\u002F23\u002Fjava-vs-c-la-gestion-des-exceptions"}],_img:{"/_ipx/_/hugo-nb.jpg":"\u002F_nuxt\u002Fimage\u002Fc3e54c.jpg"}}],fetch:{},mutations:void 0}}("text","element","\n","p","eviter-les-conflits-de-nom-dans-les-interfaces-en-c","csharp","java","[![](\u002Fimages\u002Fjavac1.png \"javac\")](http:\u002F\u002Feventuallycoding.com\u002Fwp-content\u002Fuploads\u002F2011\u002F05\u002Fjavac1.png) **Warning, warning,** ceci n'est pas une rubrique...","javac1.png","Eviter les conflits de nom dans les interfaces en C#","a","2022-08-22T07:55:20.667Z","cover3.jpg")));