[{"data":1,"prerenderedAt":199},["Reactive",2],{"/articles/2011/03/23/java-vs-c-la-gestion-des-exceptions":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"id":10,"date":11,"categories":12,"tags":14,"cover":17,"readingTime":18,"body":23,"_type":194,"_id":195,"_source":196,"_file":197,"_extension":198},"/articles/2011/03/23/java-vs-c-la-gestion-des-exceptions","23",false,"","Java Vs C# : La gestion des exceptions","**Warning, warning,** ceci n'est pas une rubrique...","143","2011-03-23",[13],"waza",[15,16],"csharp","java","javac1.png",{"text":19,"minutes":20,"time":21,"words":22},"3 min read",2.12,127200,424,{"type":24,"children":25,"toc":189},"root",[26,48,53,58,65,70,75,80,85,90,95,129,134,139,144,149,154,159,164,169,174,179,184],{"type":27,"tag":28,"props":29,"children":30},"element","p",{},[31,37,40,46],{"type":27,"tag":32,"props":33,"children":36},"img",{"alt":7,"src":34,"title":35},"/images/javac1.png","javac",[],{"type":38,"value":39},"text"," ",{"type":27,"tag":41,"props":42,"children":43},"strong",{},[44],{"type":38,"value":45},"Warning, warning,",{"type":38,"value":47}," ceci n'est pas une rubrique à troll !!",{"type":27,"tag":28,"props":49,"children":50},{},[51],{"type":38,"value":52},"Bien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre.",{"type":27,"tag":28,"props":54,"children":55},{},[56],{"type":38,"value":57},"Et donc le truc qui tue du jour :",{"type":27,"tag":59,"props":60,"children":62},"h3",{"id":61},"la-gestion-des-exceptions-en-c-et-java",[63],{"type":38,"value":64},"La gestion des exceptions en C# et Java",{"type":27,"tag":28,"props":66,"children":67},{},[68],{"type":38,"value":69},"A première vue, rien qui semble différencier la gestion des exceptions en C# et Java. La syntaxe est quasi identique :",{"type":27,"tag":28,"props":71,"children":72},{},[73],{"type":38,"value":74},"try\n{\n...\n}\ncatch (NullPointerException e)\n{\n...\nthrow e;\n}\nfinally\n{\n...\n}",{"type":27,"tag":28,"props":76,"children":77},{},[78],{"type":38,"value":79},"et",{"type":27,"tag":28,"props":81,"children":82},{},[83],{"type":38,"value":84},"try\n{\n...\n}\ncatch (NullReferenceException)\n{\n...\nthrow ;\n}\nfinally\n{\n...\n}",{"type":27,"tag":28,"props":86,"children":87},{},[88],{"type":38,"value":89},"Non seulement la syntaxe est très proche mais les Exceptions forment une hiérarchie héritant à chaque fois d'une classe mère dans chacun des deux langages.",{"type":27,"tag":28,"props":91,"children":92},{},[93],{"type":38,"value":94},"Cependant cette hiérarchie connait une différence importante en Java :",{"type":27,"tag":96,"props":97,"children":98},"ul",{},[99,105,110],{"type":27,"tag":100,"props":101,"children":102},"li",{},[103],{"type":38,"value":104},"Chaque Exception dérive de Throwable",{"type":27,"tag":100,"props":106,"children":107},{},[108],{"type":38,"value":109},"Throwable a 2 types dérivées : Error et Exception",{"type":27,"tag":100,"props":111,"children":112},{},[113,115,120,122,127],{"type":38,"value":114},"Les exceptions sont partagées en \"",{"type":27,"tag":41,"props":116,"children":117},{},[118],{"type":38,"value":119},"checked exception",{"type":38,"value":121},"\" et \"",{"type":27,"tag":41,"props":123,"children":124},{},[125],{"type":38,"value":126},"unchecked exception",{"type":38,"value":128},"\"",{"type":27,"tag":28,"props":130,"children":131},{},[132],{"type":38,"value":133},"Autrement dit, il existe des exceptions qu'il ne faut pas attraper (les Error : OutOfMemoryError, NoClassDeFoundError etc...), des exceptions qu'on n'est pas obligé d'attraper (les unchecked) et des exceptions qu'il faut obligatoirement traiter si elles sont lancées (les checked).",{"type":27,"tag":28,"props":135,"children":136},{},[137],{"type":38,"value":138},"Et pour préciser les exceptions qu'un code peut lancer, une méthode doit déclarer ces exceptions dans sa signature :",{"type":27,"tag":28,"props":140,"children":141},{},[142],{"type":38,"value":143},"public void method() throws Exception1, Exception1\n{\n// ...\n}",{"type":27,"tag":28,"props":145,"children":146},{},[147],{"type":38,"value":148},"Cette différence très importante va permettre au compilateur de vérifier la cohérence du code. L'appel d'une méthode entrainera obligatoirement le traitement des exceptions déclarées en signature.",{"type":27,"tag":28,"props":150,"children":151},{},[152],{"type":38,"value":153},"Ainsi les codes suivants seront valides :",{"type":27,"tag":28,"props":155,"children":156},{},[157],{"type":38,"value":158},"private void anotherMethod()\n{\ntry\n{\nmethod();\n}\ncatch (Exception1 e1)\n{\n}\ncatch (Exception2 e2)\n{\n}\n}",{"type":27,"tag":28,"props":160,"children":161},{},[162],{"type":38,"value":163},"// si on ne les attrape pas, il faut au moins les relancer et le déclarer\nprivate void anotherMethod() throws Exception1, Exception1\n{\nmethod();\n}",{"type":27,"tag":28,"props":165,"children":166},{},[167],{"type":38,"value":168},"Par contre le code suivant ne compilera pas :",{"type":27,"tag":28,"props":170,"children":171},{},[172],{"type":38,"value":173},"private void anotherMethod()\n{\ntry\n{\nmethod();\n}\ncatch (Exception1 e1)\n{\n}  \n// Erreur : on n'attrape pas l'exception Exception2\n}\n ",{"type":27,"tag":28,"props":175,"children":176},{},[177],{"type":38,"value":178},"private void anotherMethod()\n{\ntry\n{\nmethod();\n}\ncatch (Exception1 e1)\n{\n}  \ncatch (Exception2 e2)\n{\n}\n// Erreur : cette checked exception n'est pas lancé et ce bloc de code est donc innateignable\ncatch (Exception3 e3)\n{\n}\n}",{"type":27,"tag":28,"props":180,"children":181},{},[182],{"type":38,"value":183},"Autre truc qui tue, en Java7 la syntaxe va évoluer pour permettre le multi catch des exceptions, très pratique quand on réalise les mêmes traitements pour chaque exception attrapée :",{"type":27,"tag":28,"props":185,"children":186},{},[187],{"type":38,"value":188},"catch (Exception1|Exception2 ex)\n{\nlogger.log(ex);\nthrow ex;\n}",{"title":7,"searchDepth":190,"depth":190,"links":191},2,[192],{"id":61,"depth":193,"text":64},3,"markdown","content:articles:2011:03:23:java-vs-c-la-gestion-des-exceptions.md","content","articles/2011/03/23/java-vs-c-la-gestion-des-exceptions.md","md",1709143483043]