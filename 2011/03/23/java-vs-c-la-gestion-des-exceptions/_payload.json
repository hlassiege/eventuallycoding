[{"data":1,"prerenderedAt":207},["Reactive",2],{"/articles/2011/03/23/java-vs-c-la-gestion-des-exceptions":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"id":10,"date":11,"categories":12,"tags":14,"img":17,"cover":18,"readingTime":19,"body":24,"_type":202,"_id":203,"_source":204,"_file":205,"_extension":206},"/articles/2011/03/23/java-vs-c-la-gestion-des-exceptions","23",false,"","Java Vs C# : La gestion des exceptions","[![](/images/javac1.png \"javac\")](http://eventuallycoding.com/wp-content/uploads/2011/05/javac1.png) **Warning, warning,** ceci n'est pas une rubrique...","143","2011-03-23",[13],"waza",[15,16],"csharp","java","javac1.png","cover3.jpg",{"text":20,"minutes":21,"time":22,"words":23},"3 min read",2.12,127200,424,{"type":25,"children":26,"toc":197},"root",[27,56,61,66,73,78,83,88,93,98,103,137,142,147,152,157,162,167,172,177,182,187,192],{"type":28,"tag":29,"props":30,"children":31},"element","p",{},[32,45,48,54],{"type":28,"tag":33,"props":34,"children":38},"a",{"href":35,"rel":36},"http://eventuallycoding.com/wp-content/uploads/2011/05/javac1.png",[37],"nofollow",[39],{"type":28,"tag":40,"props":41,"children":44},"img",{"alt":7,"src":42,"title":43},"/images/javac1.png","javac",[],{"type":46,"value":47},"text"," ",{"type":28,"tag":49,"props":50,"children":51},"strong",{},[52],{"type":46,"value":53},"Warning, warning,",{"type":46,"value":55}," ceci n'est pas une rubrique à troll !!",{"type":28,"tag":29,"props":57,"children":58},{},[59],{"type":46,"value":60},"Bien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre.",{"type":28,"tag":29,"props":62,"children":63},{},[64],{"type":46,"value":65},"Et donc le truc qui tue du jour :",{"type":28,"tag":67,"props":68,"children":70},"h3",{"id":69},"la-gestion-des-exceptions-en-c-et-java",[71],{"type":46,"value":72},"La gestion des exceptions en C# et Java",{"type":28,"tag":29,"props":74,"children":75},{},[76],{"type":46,"value":77},"A première vue, rien qui semble différencier la gestion des exceptions en C# et Java. La syntaxe est quasi identique :",{"type":28,"tag":29,"props":79,"children":80},{},[81],{"type":46,"value":82},"try\n{\n...\n}\ncatch (NullPointerException e)\n{\n...\nthrow e;\n}\nfinally\n{\n...\n}",{"type":28,"tag":29,"props":84,"children":85},{},[86],{"type":46,"value":87},"et",{"type":28,"tag":29,"props":89,"children":90},{},[91],{"type":46,"value":92},"try\n{\n...\n}\ncatch (NullReferenceException)\n{\n...\nthrow ;\n}\nfinally\n{\n...\n}",{"type":28,"tag":29,"props":94,"children":95},{},[96],{"type":46,"value":97},"Non seulement la syntaxe est très proche mais les Exceptions forment une hiérarchie héritant à chaque fois d'une classe mère dans chacun des deux langages.",{"type":28,"tag":29,"props":99,"children":100},{},[101],{"type":46,"value":102},"Cependant cette hiérarchie connait une différence importante en Java :",{"type":28,"tag":104,"props":105,"children":106},"ul",{},[107,113,118],{"type":28,"tag":108,"props":109,"children":110},"li",{},[111],{"type":46,"value":112},"Chaque Exception dérive de Throwable",{"type":28,"tag":108,"props":114,"children":115},{},[116],{"type":46,"value":117},"Throwable a 2 types dérivées : Error et Exception",{"type":28,"tag":108,"props":119,"children":120},{},[121,123,128,130,135],{"type":46,"value":122},"Les exceptions sont partagées en \"",{"type":28,"tag":49,"props":124,"children":125},{},[126],{"type":46,"value":127},"checked exception",{"type":46,"value":129},"\" et \"",{"type":28,"tag":49,"props":131,"children":132},{},[133],{"type":46,"value":134},"unchecked exception",{"type":46,"value":136},"\"",{"type":28,"tag":29,"props":138,"children":139},{},[140],{"type":46,"value":141},"Autrement dit, il existe des exceptions qu'il ne faut pas attraper (les Error : OutOfMemoryError, NoClassDeFoundError etc...), des exceptions qu'on n'est pas obligé d'attraper (les unchecked) et des exceptions qu'il faut obligatoirement traiter si elles sont lancées (les checked).",{"type":28,"tag":29,"props":143,"children":144},{},[145],{"type":46,"value":146},"Et pour préciser les exceptions qu'un code peut lancer, une méthode doit déclarer ces exceptions dans sa signature :",{"type":28,"tag":29,"props":148,"children":149},{},[150],{"type":46,"value":151},"public void method() throws Exception1, Exception1\n{\n// ...\n}",{"type":28,"tag":29,"props":153,"children":154},{},[155],{"type":46,"value":156},"Cette différence très importante va permettre au compilateur de vérifier la cohérence du code. L'appel d'une méthode entrainera obligatoirement le traitement des exceptions déclarées en signature.",{"type":28,"tag":29,"props":158,"children":159},{},[160],{"type":46,"value":161},"Ainsi les codes suivants seront valides :",{"type":28,"tag":29,"props":163,"children":164},{},[165],{"type":46,"value":166},"private void anotherMethod()\n{\ntry\n{\nmethod();\n}\ncatch (Exception1 e1)\n{\n}\ncatch (Exception2 e2)\n{\n}\n}",{"type":28,"tag":29,"props":168,"children":169},{},[170],{"type":46,"value":171},"// si on ne les attrape pas, il faut au moins les relancer et le déclarer\nprivate void anotherMethod() throws Exception1, Exception1\n{\nmethod();\n}",{"type":28,"tag":29,"props":173,"children":174},{},[175],{"type":46,"value":176},"Par contre le code suivant ne compilera pas :",{"type":28,"tag":29,"props":178,"children":179},{},[180],{"type":46,"value":181},"private void anotherMethod()\n{\ntry\n{\nmethod();\n}\ncatch (Exception1 e1)\n{\n}  \n// Erreur : on n'attrape pas l'exception Exception2\n}\n ",{"type":28,"tag":29,"props":183,"children":184},{},[185],{"type":46,"value":186},"private void anotherMethod()\n{\ntry\n{\nmethod();\n}\ncatch (Exception1 e1)\n{\n}  \ncatch (Exception2 e2)\n{\n}\n// Erreur : cette checked exception n'est pas lancé et ce bloc de code est donc innateignable\ncatch (Exception3 e3)\n{\n}\n}",{"type":28,"tag":29,"props":188,"children":189},{},[190],{"type":46,"value":191},"Autre truc qui tue, en Java7 la syntaxe va évoluer pour permettre le multi catch des exceptions, très pratique quand on réalise les mêmes traitements pour chaque exception attrapée :",{"type":28,"tag":29,"props":193,"children":194},{},[195],{"type":46,"value":196},"catch (Exception1|Exception2 ex)\n{\nlogger.log(ex);\nthrow ex;\n}",{"title":7,"searchDepth":198,"depth":198,"links":199},2,[200],{"id":69,"depth":201,"text":72},3,"markdown","content:articles:2011:03:23:java-vs-c-la-gestion-des-exceptions.md","content","articles/2011/03/23/java-vs-c-la-gestion-des-exceptions.md","md",1699798354057]