{"_path":"/articles/2011/03/29/eviter-les-conflits-de-nom-dans-les-interfaces-en-c","_dir":"29","_draft":false,"_partial":false,"_locale":"","_empty":false,"title":"Java Vs C# : Eviter les conflits de nom dans les interfaces","description":"[![](/images/javac1.png \"javac\")](http://eventuallycoding.com/wp-content/uploads/2011/05/javac1.png) **Warning, warning,** ceci n'est pas une rubrique...","id":"286","date":"2011-03-29","categories":["waza"],"tags":["csharp","java"],"img":"javac1.png","cover":"cover7.jpg","readingTime":{"text":"2 min read","minutes":1.05,"time":63000,"words":210},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://eventuallycoding.com/wp-content/uploads/2011/05/javac1.png","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"","src":"/images/javac1.png","title":"javac"},"children":[]}]},{"type":"text","value":" "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Warning, warning,"}]},{"type":"text","value":" ceci n'est pas une rubrique à troll !!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Bien qu'étant plutot spécialiste Java, je me suis mis récemment au C#. Loin des débats qui n'en finissent plus pour savoir lequel des deux p... le plus loin, je tenais à faire une petite rubrique pour lister \"les trucs qui tuent\" qui existent dans chaque langage et que tout bon développeur aime connaitre."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Et donc le truc qui tue du jour :"}]},{"type":"element","tag":"h3","props":{"id":"eviter-les-conflits-de-nom-dans-les-interfaces-en-c"},"children":[{"type":"text","value":"Eviter les conflits de nom dans les interfaces en C#"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"En java vous avez sans doute déjà eu affaire à des interfaces dont les noms rentrent en conflit, non ?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Dans le cas contraire, je vous propose un petit exemple :"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"public interface IInterface1\n{\nvoid execute();\n}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"public interface IInterface2\n{\nvoid execute();\n}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"public class MyClass implements IInterface1, IInterface2\n{\npublic void execute()\n{\n//  ??\n}\n}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Rageant n'est-ce pas ? Vous tentez de respecter un contrat identique défini par deux interfaces."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Et en C# ?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"C# propose une solution intéressante à ce problème."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"public interface IInterface1\n{\nvoid Execute();\n}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"public interface IInterface2\n{\nvoid Execute();\n}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"public class MyClass : IInterface1, IInterface2\n{\nvoid IInterface1.Execute()\n{\nConsole.WriteLine(\"Execute de IInterface1\");\n}"}]},{"type":"element","tag":"code","props":{"code":"void IInterface2.Execute()\n{\n     Console.WriteLine(\"Execute de IInterface2\");\n}\n","meta":null},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"void IInterface2.Execute()\n{\n     Console.WriteLine(\"Execute de IInterface2\");\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"}"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On remarquera que les méthodes sont privées. Elles ne peuvent être appelées qu'à partir de l'interface. Ce qui est beaucoup plus propre."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"eviter-les-conflits-de-nom-dans-les-interfaces-en-c","depth":3,"text":"Eviter les conflits de nom dans les interfaces en C#"}]}},"_type":"markdown","_id":"content:articles:2011:03:29:eviter-les-conflits-de-nom-dans-les-interfaces-en-c.md","_source":"content","_file":"articles/2011/03/29/eviter-les-conflits-de-nom-dans-les-interfaces-en-c.md","_extension":"md"}